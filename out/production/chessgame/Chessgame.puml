@startuml
'https://plantuml.com/sequence-diagram

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods

package Model{

    class Game {

        + Game(pBoard : Board, pW : Player, pB : Player)

    }

    class Board {
        + Board()
        - getPiece(pos : Position) : Piece
        - setPiece(pos : Position, p : Piece)
        + movePiece(initial : Position, end Position) : Piece
        - shadowMove(initial : Position, end Position)
        + getMoves(pos : Position)
        - nextTurn()
        - validMoves(pos : Position) : Position[]
        - testMoveCheck(pos : Position, testCases : Position[]) : Position []
        - isChecked(color : Colors) : Boolean
        + checkMate()
        - updateCase(pos : Position, Piece p)
        + setObserver(observer : BoardObserver)
    }

    class Position {
        + x : Integer
        + y : Integer
        + Position(pX : Integer, pY : Integer)
        + Position()
        + equals(obj : Object) : Boolean
    }

    class Player {
        - points : Integer
        - name : String
        + Player(pColor : Colors)
        - addPoints(pts : Integer)
        + addCapturedPiece(p : Piece)
        - updateName()
        - updateScore()
        - updateCapturedPiece()
        + setObserver(observer : PlayerObserver)
        + setName(pName : String)
    }

    abstract class Piece {
        - value : Integer
        - range : Integer
        - name : String
        + Piece(pColor : Colors)
        + {abstract} moves() : Position[]
        + getName() : String

    }

    class King extends Piece {
        - asMoved : Boolean
        - range : Integer
        - name : String
        + King(pColor : Colors)
        + moves() : Position[]
        + getName() : String
    }

    class Queen extends Piece {
        - value : Integer
        - range : Integer
        - name : String
        + Queen(pColor : Colors)
        + moves() : Position[]
        + getName() : String
    }

    class Pawn extends Piece {
        - asMoved : Boolean
        - value : Integer
        - range : Integer
        - name : String
        + Pawn(pColor : Colors)
        + moves() : Position[]
        + getName() : String
    }

    class Bishop extends Piece {
        - value : Integer
        - range : Integer
        - name : String
        + Bishop(pColor : Colors)
        + moves() : Position[]
        + getName() : String
    }

    class Knight extends Piece {
        - value : Integer
        - range : Integer
        - name : String
        + Knight(pColor : Colors)
        + moves() : Position[]
        + getName() : String
    }

    class Rook extends Piece {
        - asMoved : Boolean
        - value : Integer
        - range : Integer
        - name : String
        + Rook(pColor : Colors)
        + moves() : Position[]
        + getName() : String
    }

    interface BoardObserver {
        + caseHighlight(moves : Position[])
        + setCaseImage(pos : Position, pName : String, color : Colors)
        + displayEndgame(color : Colors)
    }

    interface PlayerObserver {
        + displayName(name : String, color : Colors)
        + displayScore(score : Integer, color : Colors)
        + displayCapturedPiece(pieceList : Piece[], color : Colors)
    }

    enum Colors {
        WHITE
        BLACK
    }
}

package Controller{
    class BoardController{
        + BoardController(pGame : Game)
        + getMoves(posClick : Position)
        + movePiece(posClick : Position)
    }

    class PlayerController{
        + PlayerController(white : Player, black : Player)
        + setNames(wName : String, bName : String)
    }

}

package View {
    class Window implements PlayerObserver, BoardObserver {
        + Window(bControl : BoardController, pControl : PlayerController)
        - actionOnClick(pos : Position)
        - selectPiece(pos : Position)
        - selectMove(pos : Position)
        + displayName(name : String, color : Colors)
        + displayScore(score : Integer, color : Colors)
        + displayCapturedPiece(pieceList : Piece[], color : Colors)
        - choseIcon(pName : String, color : Colors)
        + caseHighlight(moves : Position[])
        + setCaseImage(pos : Position, pName : String, color : Colors)
        + displayEndgame(color : Colors)
    }

    class PlayerInfo {
        + PlayerInfo()
        + setPlayerName(name : String)
        + updateScore(scoreT : String)
        + addPieceIcon(icon : ImageIcon)
        + clearIcon()
        + getName() : String
    }

    class JButtonB {
        + boolean
        + JButton
        + JbuttonB()
    }

    Window *--> "1\n-whitePlayerInfo" PlayerInfo : <<has>>
    Window *--> "1\n-blackPlayerInfo" PlayerInfo : <<has>>
    Window *--> "64\n-chessBoardCases" JButtonB : <<has>>
}

class Main {

}

Game *--> "1\n-board" Board : <<has>>
Game *--> "1\n-pWhite" Player : <<has>>
Game *--> "1\n-pBlack" Player : <<has>>
Board *--> "2..32\n-board" Piece :  <<use>>
Board *--> "1\n-turn" Colors : <<has>>
Player o--> "0..15\n-capturedPieces" Piece : <<use>>
Piece *--> "1\n-color" Colors :  <<has>>

/'
    'Moins lisible avec
Pawn *--> "1\n-color" Colors :  <<has>>
King *--> "1\n-color" Colors :  <<has>>
Queen *--> "1\n-color" Colors :  <<has>>
Rook *--> "1\n-color" Colors :  <<has>>
Bishop *--> "1\n-color" Colors :  <<has>>
Knight *--> "1\n-color" Colors :  <<has>>
'/
Player *--> "1\n-color" Colors :  <<has>>
BoardController o--> "1\n-board" Game : <<modifie>>
PlayerController o--> "1\n-pWhite" Player : <<modifie>>
PlayerController o--> "1\n-pBlack" Player : <<modifie>>
Player o--> "1\n-obs" PlayerObserver : <<observe>>
Board o--> "1\n-obs" BoardObserver : <<observe>>
Main ..> Game : <<create>>
Main ..> Board : <<create>>
Main ..> Player : <<create>>
Main ..> BoardController : <<create>>
Main ..> Window : <<create>>


Window *--> "1\n-bControl" BoardController : <<use>>
Window *-u-> "1\n-pControl" PlayerController : <<use>>

@enduml
