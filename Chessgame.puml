@startuml
'https://plantuml.com/sequence-diagram

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods

class Board {
    - board : Piece[]
    + getPiece(Tuple : position) : Piece
}

class Case{
- piece : Piece
- cordX : Integer
- cordY : Integer
+ setPiece(piece : Piece)
+ getPiece() : Piece
+ IsEmpty() : Boolean

}

class Player {
    - points : Integer
    - name : String
    - isChecked() : Boolean
}

abstract class Piece {
    - value : Integer
    - color : Color
    - range : Integer
    + Piece(color : Colors)
    + {abstract} moves() : Integer[]

}

class King extends Piece {
    - asMoved : Boolean
    + King(color : Color)
    + moves() : Integer[]
}

class Queen extends Piece {
    - value : Integer
    - color : String
    - range : Integer
    + moves() : Integer[]
}

class Pawn extends Piece {
    - asMoved : Boolean
    - value : Integer
    - color : String
    - range : Integer
    + moves() : Integer[]
}

class Bishop extends Piece {
    - value : Integer
    - color : String
    - range : Integer
    + moves() : Integer[]
}

class Knight extends Piece {
    - value : Integer
    - color : String
    - range : Integer
    + moves() : Integer[]
}

class Rook extends Piece {
    - asMoved : Boolean
    - value : Integer
    - color : String
    - range : Integer
    + moves() : Integer[]
}

enum Color {
    WHITE
    BLACK
}

Board o--> Piece : "*\n -board" <<use>>
Player *-l-> Piece : "*\n -pieces" <<use>>
Player o--> Piece : "*\n -capturedPieces" <<use>>
Piece *--> Color : "1\n -color" <<use>>

@enduml

@startuml
'https://plantuml.com/sequence-diagram

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods

class Board {


    - board : Case[]
    - isChecked() : Boolean
    + getPiece(Position) : Piece
}

class Player {
    - points : Integer
    - name : String
    + movePiece(piece : Piece , case : Case)
}

class Piece {

    - value : Integer
    - color : String
    - moves : Integer
    - range : Integer
    + {abstract} moves() : Integer[][]
}

class Case{
- piece : Piece
- cordX : Integer
- cordY : Integer
+ setPiece(piece : Piece)
+ getPiece() : Piece
+ IsEmpty() : Boolean

}

class King extends Piece {
    - asMoved : Boolean
}

class Queen extends Piece {

}

class Pawn extends Piece {
    - asMoved : Boolean
}

class Bishop extends Piece {

}

class Knight extends Piece {

}

class Rook extends Piece {
    - asMoved : Boolean
}

enum Color {
    WHITE
    BLACK
}

Board *--> Case : "*\n -board" <<use>>
Player *-l-> Piece : "*\n -pieces" <<use>>
Player *--> Piece : "*\n -capturedPieces" <<use>>
Piece *--> Color : "1\n -color" <<use>>

@enduml